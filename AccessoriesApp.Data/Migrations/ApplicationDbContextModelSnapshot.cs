// <auto-generated />
using System;
using AccessoriesApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccessoriesApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccessoriesApp.Data.Models.Accessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Accessory identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Accessory description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Accessory image url from the image store");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if Accessory is deleted");

                    b.Property<decimal>("PriceBGN")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("CAST(ROUND([PriceEuro] / 1.95583, 2) AS decimal(18,2))");

                    b.Property<decimal>("PriceEuro")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Accessory price Euro");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasComment("Accessory release date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Accessory title");

                    b.Property<string>("TypeAccessory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Accessory type");

                    b.HasKey("Id");

                    b.ToTable("Accessories", t =>
                        {
                            t.HasComment("Accessory in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae50a5ab-9642-466f-b528-3cc61071bb4c"),
                            Description = "Размер: един\r\nМатерия: слама",
                            ImageUrl = "verde_1743160657.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 7.25m,
                            ReleaseDate = new DateOnly(2005, 11, 1),
                            Title = "Дамско бомбе 05-0000769 S мента",
                            TypeAccessory = "Hats"
                        },
                        new
                        {
                            Id = new Guid("777634e2-3bb6-4748-8e91-7a10b70c78ac"),
                            Description = "Размери:\r\nВисочина: 28 см,\r\nДължина: 16 см,\r\nШирина: 9 см.\r\n",
                            ImageUrl = "verde_1743161112.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 42.52m,
                            ReleaseDate = new DateOnly(2001, 5, 1),
                            Title = "Дамска раница16-0007678 бежова",
                            TypeAccessory = "Bags"
                        },
                        new
                        {
                            Id = new Guid("68fb84b9-ef2a-402f-b4fc-595006f5c275"),
                            Description = "Размери:\r\nВисочина: 38 см,\r\nДължина: 30 см,\r\nШирина: 12 см.",
                            ImageUrl = "verde_1743160545.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 52.52m,
                            ReleaseDate = new DateOnly(2010, 7, 16),
                            Title = "Дамска чанта 16-0007365 светло синя",
                            TypeAccessory = "Bags"
                        },
                        new
                        {
                            Id = new Guid("02b52bb0-1c2b-49a4-ba66-6d33f81d38d1"),
                            Description = "Размери:\r\nВисочина: 22 см,\r\nДължина: 28 см,\r\nШирина: 3 см.",
                            ImageUrl = "verde_1743160301.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 35.52m,
                            ReleaseDate = new DateOnly(2008, 7, 18),
                            Title = "Дамска чанта плик 01-0001795 лилава",
                            TypeAccessory = "Bags"
                        },
                        new
                        {
                            Id = new Guid("16376cc6-b3e0-4bf7-a0e4-9cbd1490522c"),
                            Description = "Форма на очила: правоъгълник.\r\nЦвят на леща: преливащ, сиво-кафяв нюанс.\r\nЦвят на рамка: сребрист.\r\nЗащита: поляризация. UV400",
                            ImageUrl = "slancevi-ocila.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 45.52m,
                            ReleaseDate = new DateOnly(2014, 11, 7),
                            Title = "Слънчеви очила HAVVS - преливащи лещи, преливаща метална рамка",
                            TypeAccessory = "Glasses"
                        },
                        new
                        {
                            Id = new Guid("811a1a9e-61a8-4f6f-acb0-55a252c2b713"),
                            Description = "Характеристики на очилата\r\nФорма на очила: правоъгълна.\r\nЦвят на леща: черен.\r\nЦвят на рамка: черен.\r\nМатериал на рамка: метал.\r\nЗащита: поляризация.\r\nНомер: TR8999.",
                            ImageUrl = "mazki-slancevi-ocila-matrix-aviator",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 42.47m,
                            ReleaseDate = new DateOnly(2009, 12, 18),
                            Title = "Мъжки слънчеви очила Тhom Richard с правоъгълна форма",
                            TypeAccessory = "Glasses"
                        },
                        new
                        {
                            Id = new Guid("ab2c3213-48a7-41ea-9393-45c60ef813e6"),
                            Description = "Цвят: Черно\r\nМатериал: Памук, Акрил\r\nРазмери: 31см. X 188см.\r\nСтил:  Ежедневен\r\nПол: Мъж",
                            ImageUrl = "mazki-sal-mazki-shal.jpeg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 12.54m,
                            ReleaseDate = new DateOnly(1997, 12, 19),
                            Title = "Мъжки шал",
                            TypeAccessory = "Scarves"
                        },
                        new
                        {
                            Id = new Guid("844d9abd-104d-41ab-b14a-ce059779ad91"),
                            Description = "Цвят: Син\r\nМатериал: Памук, Акрил\r\nРазмери: 31см. X 188см.\r\nСтил:  Ежедневен\r\nПол: Мъж",
                            ImageUrl = "mazki-mazki-image.jpeg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 15.45m,
                            ReleaseDate = new DateOnly(1999, 3, 31),
                            Title = "Мъжки двулицев шал",
                            TypeAccessory = "Scarves"
                        },
                        new
                        {
                            Id = new Guid("54082f99-023b-4d68-89ac-44c00a0958d0"),
                            Description = "Размери:\r\nВисочина: 160.00 см,\r\nШирина: 90.00 см.\r\n\r\nСъстав: памук",
                            ImageUrl = "verde_1747042025_2.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 17.56m,
                            ReleaseDate = new DateOnly(1994, 7, 6),
                            Title = "Плажна кърпа 61-0000027 оранжева",
                            TypeAccessory = "Beachtowels"
                        },
                        new
                        {
                            Id = new Guid("bf9ff8b3-3209-4b18-9f4b-5172c45b73f9"),
                            Description = "Размери:\r\nВисочина: 160.00 см,\r\nШирина: 90.00 см.\r\n\r\nСъстав: памук",
                            ImageUrl = "verde_1747042020_2.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 19.52m,
                            ReleaseDate = new DateOnly(2000, 5, 5),
                            Title = "Плажна кърпа 61-0000026 зелена",
                            TypeAccessory = "Beachtowels"
                        },
                        new
                        {
                            Id = new Guid("e00208b1-cb12-4bd4-8ac1-36ab62f7b4c9"),
                            Description = "Джоб/ове за хартиени пари: Джоб за монети: Вътрешни джобове.\r\nДжоб/ове за кредитни карти.Джоб за лична карта.\r\nМатериал: Екологична синтетична кожа.\r\n​Предлага се в подаръчна кутия.\r\n\r\nРазмери:\r\nВисочина: 19 см,\r\nДължина: 10 см,\r\nШирина: 3 см.",
                            ImageUrl = "verde_1730297565.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 18.78m,
                            ReleaseDate = new DateOnly(1994, 9, 23),
                            Title = "Дамско потртмоне 18-1291 бронз",
                            TypeAccessory = "Purses"
                        },
                        new
                        {
                            Id = new Guid("4491b6f5-2a11-4c4c-8c6b-c371f47d2152"),
                            Description = "Размери:\r\nВисочина: 9 см,\r\nДължина: 10 см,\r\nШирина: 2 см.\r\n\r\nДжоб за хартиени пари.\r\nДжоб за монети. Вътрешни джобове. Джоб за кредитни карти. Джоб за лична карта.\r\nМатериал: Екологична синтетична кожа.\r\nПредлага се в подаръчна кутия.",
                            ImageUrl = "verde_1730297433.jpg",
                            IsDeleted = false,
                            PriceBGN = 0m,
                            PriceEuro = 16.47m,
                            ReleaseDate = new DateOnly(1994, 10, 14),
                            Title = "Pulp Fiction",
                            TypeAccessory = "Purses"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
